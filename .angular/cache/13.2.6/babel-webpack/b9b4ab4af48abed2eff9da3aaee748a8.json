{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport Validation from 'src/app/utils/validation';\nlet RegisterComponent = class RegisterComponent {\n  // registerForm = this.fb.group({\n  //   username: ['', Validators.required, Validators.minLength(4)],\n  //   email: ['', [Validators.required, Validators.email]],\n  //   password: ['', Validators.required, Validators.minLength(4)],\n  //   password2: ['', Validators.required, Validators.minLength(4)],\n  //   terminos: [false, Validators.required],\n  // }, {\n  //   Validators: this.passwordsIguales('password', 'password2')\n  // });\n  constructor(fb, usuarioService, router) {\n    this.fb = fb;\n    this.usuarioService = usuarioService;\n    this.router = router;\n    this.formSubmitted = false;\n    this.registerForm = new FormGroup({\n      username: new FormControl(''),\n      email: new FormControl(''),\n      password: new FormControl(''),\n      password2: new FormControl(''),\n      terminos: new FormControl(false)\n    });\n  }\n\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(24)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(24)]],\n      password2: ['', Validators.required],\n      terminos: [false, Validators.requiredTrue]\n    }, {\n      validators: [Validation.match('password', 'password2')]\n    });\n  }\n\n  get f() {\n    return this.registerForm.controls;\n  }\n\n  crearCuenta() {\n    this.formSubmitted = true; // console.log( this.registerForm.value );\n\n    console.log(this.registerForm.value);\n\n    if (this.registerForm.invalid) {\n      return;\n    } // Si el formulario es validor realizamos el Posteo\n\n\n    this.usuarioService.crearUsuario(this.registerForm.value).subscribe({\n      next: () => {\n        this.router.navigateByUrl('login');\n      },\n      error: err => {\n        //En el caso de suceder un error  sweetalert2\n        Swal.fire('Error', err.error.msg, 'error');\n      }\n    });\n  }\n\n  campoNoValido(campo) {\n    var _a;\n\n    if (((_a = this.registerForm.get(campo)) === null || _a === void 0 ? void 0 : _a.invalid) && this.formSubmitted) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  aceptaTerminos() {\n    var _a;\n\n    return !((_a = this.registerForm.get('terminos')) === null || _a === void 0 ? void 0 : _a.value) && this.formSubmitted;\n  }\n\n  contrasenasnoValidas() {\n    var _a, _b;\n\n    const pass1 = (_a = this.registerForm.get('password')) === null || _a === void 0 ? void 0 : _a.value;\n    const pass2 = (_b = this.registerForm.get('password2')) === null || _b === void 0 ? void 0 : _b.value;\n\n    if (pass1 !== pass2 && this.formSubmitted) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  passwordsIguales(pass1Name, pass2Name) {\n    return formGroup => {\n      const pass1Control = formGroup.get(pass1Name);\n      const pass2Control = formGroup.get(pass2Name);\n\n      if ((pass1Control === null || pass1Control === void 0 ? void 0 : pass1Control.value) === (pass2Control === null || pass2Control === void 0 ? void 0 : pass2Control.value)) {\n        pass2Control === null || pass2Control === void 0 ? void 0 : pass2Control.setErrors({});\n      } else {\n        pass2Control === null || pass2Control === void 0 ? void 0 : pass2Control.setErrors({\n          noEsIgual: true\n        });\n      }\n    };\n  }\n\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":null,"metadata":{},"sourceType":"module"}